// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Big parts

    ALU(x=d, y=am,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=outALU, zr=zr, ng=ng);
    // if reset, pc=0
    // else, if there should be a jump, pc=a
    // else, pc=pc+1
    // luckily, this is the exact order that PC looks at its inputs
    PC(in=a, load=jump, reset=reset, inc=true, out[0..14]=pc);
    ARegister(in=inA, load=loadA, out=a);
    DRegister(in=outALU, load=loadD, out=d);

    // Instruction Decoding

    // Most instruction decoding can happen where needed, but side
    // effects from ALU calculations should only happen on a C instruction
    And(a=instruction[15], b=instruction[5], out=loadAFromALU);
    And(a=instruction[15], b=instruction[4], out=loadD);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC
    Jump(isC=instruction[15], jumpBits=instruction[0..2], zr=zr, ng=ng, out=jump);

    // A
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=loadAFromALU, out=loadA);
    Mux16(a=outALU, b=instruction, sel=isA, out=inA);

    // M
    Buffer16(in=outALU, out=outM);
    Buffer16(in=a, out[0..14]=addressM);

    // Y input into ALU is either A or M
    Mux16(a=a, b=inM, sel=instruction[12], out=am);
}